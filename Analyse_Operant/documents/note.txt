New analysis

+ fake event : 3 min après début rec (a reflechir format compatible fichier boris ?) 
+ ajouter PSTHs zscored matrix
+ filtrer sortir txt avec valeurs
+ ajouter AUC, avec definition de la periode pour le calcul de l'AUC.
+ ajouter une ligne sur la heatmap pout t=0
+ changer les valeurs en x, bin_num => temps
+ ajouter sous les heatmap un graph qui represente la moyenne et l'ecart type de chaque ligne
+ sauver les heamaps en .fig
+ baseline globale, a choisir, on définit un evt, une periode temps, pour chaque essai on utilise la baseline globale pour le dff
+ définition de l'essai, ajouter dans RESULTS.mat le numero de l'essai, le numéro de l'evt absolue, et le numéro de l'event dans l'essai.
+ resampler les données dff pour traiter différentes sfreq dans une même analyse
+ reprendre la sauvegarde de la base de données pour un meilleure compatibilité avec le tableau croisé dynamique
+ choisir la taille des bins pour le PEATS
- heatmap contient toutes les lignes du result, il faudrait moyenner les ligne pour chaque niveau
- calcul de la baseline par essai soit fait en début de step2;



-- a regarder plus tard
- peut etre prendre le premier lick apres us slt si il n'y a pas eu de lick X secondes avant
extraire
- reprendre le data summary
- open doric, extract imetronik events, return data si imetronik_DB est vide



Exporter plus results dans un fichier xlsx
>> A=load('RESULTS.mat');
>> B=load('RESULTS.mat');
>> m = [A.as.metadata;B.as.metadata];
>> writetable(m,'test.xlsx','Sheet',1);
>> 




Exporter plus results dans un fichier xlsx
A=load('RESULTS.mat');
writetable(A.as.metadata,'test.xlsx','Sheet',1); 
ouvir avec excel
ajouter une colonne line_num
trier par essai
on garde slt les essais interessant
on ajoute une colonne qui tag les essais (exemple début, fin)
on supprime la colonne path
on sauve en tsv (tabulation comme séparateur)

A=readtable('metadata_tri2.txt',"VariableNamingRule","preserve");
B=load('Results.mat');
B.as.metadata = B.as.metadata(A.line_number,:);


for i=1:size(A.tag_essai,1)
    v = A.tag_essai(i);
    B.as.metadata.tag_essai(i) = v(:);
end

B.as.PSTH.dff_matrix = B.as.PSTH.dff_matrix(A.line_number,:);

as = B.as;
params = B.params;

save('RESULTS_TRI.mat','as','params');


B.as.metadata = B.as.metadata(A.line_number,:)
    res.metadata = as.metadata;
    res.matrix = as.PSTH.dff_matrix;



